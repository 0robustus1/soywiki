#!/usr/bin/env ruby
require 'soywiki'

class Soywiki::Expander
  # Takes any wiki link that stands alone on a line and expands it
  # this is different from Soywiki::WIKI_WORD in that it requires ^\s* before the
  # first letter

  WIKI_LINK_PATTERN =  /^\s*([a-z0-9]\w+\.)?[A-Z][a-z]+[A-Z0-9]\w*\s*$/

  attr_reader :mode, :file, :processed_files

  include PathHelper

  def initialize(mode, file)
    @mode = mode
    @file = file
    @processed_files = []
  end

  def seamless?
    mode == 'seamless'
  end

  def seamful?
    mode == 'seamful'
  end

  def indent(text, level)
    return text if seamless?
    return text if level == 0
    ('|' * level) + ' ' +  text
  end

  def divider
    puts '+' + '-' * 78 + '+'
  end

  def expand(level=0)
    processed_files << file
    lines = File.readlines(file)
    lines.shift if seamless?   # strips title
    lines = lines.join.strip.split("\n")
    lines.each do |line|
      # note that the wiki link must be alone on the line to be expanded
      if line =~ WIKI_LINK_PATTERN
        link = line.strip
        if link =~ /(\A|\s)[A-Z]/ # short link in namespace (relative link)
          namespace = file.namespace
          link = [namespace, link].join('.')
        end
        if File.file?(link.to_file_path) && !processed_files.include?(link.to_file_path)
          divider if seamful?
          expand(link.to_file_path, mode, level + 1) # recursive call
          divider if seamful?
        elsif processed_files.include?(link)
          puts indent("#{link} [[already expanded]]", level)
        elsif !File.file?(link.to_file_path)
          puts indent("#{link} [[no file found]]", level)
        else
          puts indent("#{link}", level)
        end
      else
        puts indent(line, level)
      end
    end
  end

end

mode, file = *ARGV
expander = Soywiki::Expander.new(mode, file)
expander.expand
