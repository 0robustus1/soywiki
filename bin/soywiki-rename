#!/usr/bin/env ruby
require 'soywiki'

oldname, newname = *ARGV

MEMO = ["Updating inbound and outbound links..."]

def report(file, oldname, newname)
  MEMO <<  "  - In #{file}: #{oldname.to_page_title} -> #{newname.to_page_title}"
end

def change_all_absolute_links(oldname, newname)
  MEMO << "- Updating all absolute links"
  target_files = `grep -rlF '#{oldname.to_page_title}' *`.strip.split(/\n/)
  target_files.each do |file|
    text = File.read(file)
    regex = /\b#{oldname.to_page_title}\b/
    matches = text.scan(regex)
    text.gsub!(regex, newname.to_page_title)
    File.open(file, 'w') {|f| f.puts text}
    report file, oldname.to_page_title, newname.to_page_title
  end
end

def change_unqualified_inbound_links(oldname, newname)
  MEMO << "- Updating unqualified inbound links"
  target_files = `grep -rlF '#{oldname.to_page_title}' #{oldname.namespace}/*`.strip.split(/\n/)
  target_files.each do |file|
    text = File.read(file)
    text.gsub!(/\b#{oldname.short_page_title}\b/, "." + newname)
    File.open(file, 'w') {|f| f.puts text}
    report file, oldname.short_page_title, newname
  end
end

RELATIVE_LINK_REGEX =/\b([A-Z][a-z]+[A-Z]\w*)/

def absolutize_unqualified_outbound_links(oldname, newname)
  MEMO << "Absolutizing unqualified inbound links"
  if File.exist?(newname.to_file_path)
    text = File.read(newname.to_file_path)
    matches = text.scan(RELATIVE_LINK_REGEX)
    text.gsub!(RELATIVE_LINK_REGEX, oldname.namespace + '.\1')
    File.open(newname.to_file_path, 'w') {|f| f.puts text}
    MEMO <<  "  - In file #{file}: Absolutized these unqualified links: #{matches.inspect}"
  end
end


# Three other cases to cover, involving namespaces:
#
# Case 1: newname is in same namespace as oldname
#
# In the directory for OldName's namespace, change all unqualified referenecs to
# OldName to NewName

if oldname.namespace == newname.namespace
  MEMO << "- Updating unqualified links in same namespace"
  target_files = `grep -rlF '#{oldname.short_page_title}' #{oldname.namespace}/*`.strip.split(/\n/)
  target_files.each do |file|
    text = File.read(file)
    text.gsub!(/\b(#{oldname.short_page_title})\b/, newname.short_page_title)
    File.open(file, 'w') {|f| f.puts text}
    report file, oldname.short_page_title, newname.short_page_title
  end
end

# Case 2: newname is in different namespace from oldname
if oldname.namespace != newname.namespace
  # In the directory for OldName's namespace, change all unqualified references to
  # OldName to newnamespace.NewName (i.e. NewName).
  change_unqualified_inbound_links(oldname, newname)
  # And in the renamed file, change all unqualified references to
  # PageName to oldnamespace.PageName
  absolutize_unqualified_outbound_links(oldname, newname)
end

# Finally,
change_all_absolute_links oldname, newname

puts MEMO.join("\n")
